<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       https://www.springframework.org/schema/tx/spring-tx.xsd">

<!--    1.要扫描的包，除了controller以外的包-->
    <context:component-scan base-package="com.fisheep">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!--    2.说明jdbc配置文件，配置数据源-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

<!--    注入redis连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}"></property>
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <property name="minIdle" value="${redis.minIdle}"></property>
    </bean>

<!--    注入redis连接池-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
        <constructor-arg name="host" value="${redis.host}"></constructor-arg>
        <constructor-arg name="port" value="${redis.port}"></constructor-arg>
        <constructor-arg name="timeout" value="${redis.timeout}"></constructor-arg>
        <constructor-arg name="password" value="${redis.password}"></constructor-arg>
    </bean>

    <!--3.配置和mybatis的整合,配置sqlSessionFactory-->
    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

<!--    4.因为mybatis是用的xml配置文件的这个，所以还需要扫描这个dao接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.fisheep.dao"></property>
    </bean>

<!--    5.配置事务管理器，控制住上面那个数据源-->
    <bean name="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
     </bean>

<!--    6.配置aop切面-->
    <aop:config>
        <aop:pointcut id="pt1" expression="execution( * com.fisheep.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
<!--            这是默认的-->
            <tx:method name="*"/>
            <!-- 配置以get开始的方法，我们把这种开头的方法都为查询方法，所以后面可以做调优，read-only来做-->
            <!--
                name: 方法名，可以使用通配符的方式配置
                propagation： 传播的行为，查询方法SUPPORTS， 增删改方法：REQUIRED
                isolation： 隔离级别：一般选择数据库默认的隔离级别（一般不用配置）
                read-only： 只读，查询使用只读操作，增删改使用非只读操作
                time-out: 超时的时间定义，默认-1 ，永不超时（一般不用配置）
             -->
            <tx:method name="get*" read-only="true"></tx:method>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="Exception"></tx:method>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="Exception"></tx:method>
        </tx:attributes>
    </tx:advice>



    <!-- ===============shiro=shiro=shiro=shiro=shiro=shiro==================-->

    <!-- Shiro's main business-tier object for web-enabled applications -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"></property>
        <property name="realm" ref="FirstShiroRealm"></property>
    </bean>


    <bean class="org.apache.shiro.web.mgt.DefaultWebSessionStorageEvaluator">
        <property name="sessionStorageEnabled" value="true"></property>
    </bean>
    <!-- 用户授权信息Cache -->
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager">
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id="FirstShiroRealm" class="com.fisheep.shiro.realms.FirstShiroRealm"></bean>


    <!-- 保证实现了Shiro内部lifecycle函数的bean执行,可以自定的来调用配置在Spring IOC容器中shiro bean 的生命周期方法.    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- AOP式方法级权限检查,启用IOC容器中shiro相关的注解，但必须在配置了LifecycleBeanPostProcessor之后才可以使用 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <!--
    Shiro Filter ，这里的id需要和web.xml里面的那个shiroFilter的name标签一样；
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/index.html" />
        <property name="unauthorizedUrl" value="/tmp.html"></property>
        <!--
		这里配置哪些页面需要保护，以及访问这些页面需要哪些权限;
		/login.jhtml = anon：
		        表示这个页面，或者前面配置请求的时候，可以被匿名访问，后面的anon表示可以被匿名访问；
		/** = authc ：
		        这种使用通配符的方式，表示除了特殊指定的，余下的所有都许哟啊经过认证之后才能被访问，
		        authc表示需要经过认证（登陆）；当认证不通过的时候，shiro会自动重定向到上卖弄的login.jhtml页面；
		        采用第一次优先匹配的方式；
        -->
        <property name="filterChainDefinitions">
            <value>
                /static/** =  anon
<!--                index.html-->
                /toLogin = anon
                /homeworkCode/** = anon
                /toHomeworkSubmit/** = anon
<!--                homeworksubmit.html-->
                /fileUpload = anon
<!--                login.html-->
                /checkEmail = anon
                /userSignUp = anon
                /userSignIn = anon
<!--                其他请求-->
                /** = authc
            </value>
        </property>
    </bean>


    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>


</beans>